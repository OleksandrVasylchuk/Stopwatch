{"version":3,"sources":["Component/App/App.module.css","Component/App/App.js","index.js"],"names":["module","exports","StopWatch","props","state","timer","hours","counter","seconds","startDisabled","stopDisabled","onPageLoad","bind","onButtonStart","onButtonStop","onButtonWait","onButtonReset","start","this","clearInterval","self","setInterval","num","Number","toString","count","hour","setState","length","className","s","container","hourse","containeBbuttons","button","onClick","title","onDoubleClick","Component","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.b052205c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1IMg8\",\"hourse\":\"App_hourse__3S5K0\",\"containeBbuttons\":\"App_containeBbuttons__2GKxl\",\"button\":\"App_button__KQwfM\",\"timer\":\"App_timer__FlB75\"};","import { React, Component } from \"react\";\nimport s from \"./App.module.css\";\n\nclass StopWatch extends Component {\n  state = {\n    timer: null,\n    hours: \"00\",\n    counter: \"00\",\n    seconds: \"00\",\n    startDisabled: true,\n    stopDisabled: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.onPageLoad = this.onPageLoad.bind(this);\n    this.onButtonStart = this.onButtonStart.bind(this);\n    this.onButtonStop = this.onButtonStop.bind(this);\n    this.onButtonWait = this.onButtonWait.bind(this);\n    this.onButtonReset = this.onButtonReset.bind(this);\n    this.start = this.start.bind(this);\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timer);\n  }\n\n  start() {\n    let self = this;\n    let timer = setInterval(() => {\n      let num = (Number(this.state.seconds) + 1).toString(),\n        count = this.state.counter;\n      let hour = this.state.hours;\n\n      if (Number(this.state.seconds) === 59) {\n        count = (Number(this.state.counter) + 1).toString();\n        num = \"00\";\n      }\n      if (Number(this.state.counter) === 59) {\n        hour = (Number(this.state.hours) + 1).toString();\n        count = this.state.hours;\n        num = \"00\";\n      }\n      self.setState({\n        hours: hour.length === 1 ? \"0\" + hour : hour,\n        counter: count.length === 1 ? \"0\" + count : count,\n        seconds: num.length === 1 ? \"0\" + num : num,\n      });\n    }, 1000);\n    this.setState({ timer });\n  }\n\n  onPageLoad() {\n    this.start();\n    this.setState({ startDisabled: true, stopDisabled: false });\n  }\n\n  onButtonStart() {\n    this.start();\n    this.setState({ startDisabled: true, stopDisabled: false });\n  }\n\n  onButtonStop() {\n    clearInterval(this.state.timer);\n    this.setState({ startDisabled: false, stopDisabled: true });\n    this.setState({\n      timer: null,\n      hours: \"00\",\n      counter: \"00\",\n      seconds: \"00\",\n    });\n  }\n\n  onButtonWait() {\n    clearInterval(this.state.timer);\n    this.setState({ startDisabled: false, stopDisabled: true });\n  }\n\n  onButtonReset() {\n    this.setState({\n      timer: null,\n      hours: \"00\",\n      counter: \"00\",\n      seconds: \"00\",\n      startDisabled: false,\n      stopDisabled: true,\n    });\n  }\n\n  render() {\n    return (\n      <div className={s.container}>\n        <div className={s.hourse}>\n          <p className={s.timer}>\n            {this.state.hours ? this.state.hours : \"counter state is empty\"}:\n          </p>\n          <p className={s.timer}>\n            {this.state.counter ? this.state.counter : \"counter state is empty\"}\n            :\n          </p>\n          <p className={s.timer}>\n            {this.state.seconds ? this.state.seconds : \"seconds state is empty\"}\n          </p>\n        </div>\n\n        <div className={s.containeBbuttons}>\n          <button\n            className={s.button}\n            onClick={() => this.onButtonStart()}\n            title=\"Start\"\n          >\n            Start\n          </button>\n          <button\n            className={s.button}\n            onClick={() => this.onButtonStop()}\n            title=\"Stop\"\n          >\n            Stop\n          </button>\n          <button\n            className={s.button}\n            onDoubleClick={() => this.onButtonWait()}\n            title=\"Wait\"\n          >\n            Wait\n          </button>\n          <button\n            className={s.button}\n            onClick={() => this.onButtonReset()}\n            title=\"Reset\"\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StopWatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { Redux, ReactRedux } from \"react-redux\";\n// import { Application } from \"./App\";\n// import store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./Component/App/App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// ReactDOM.render(\n//   <ReactRedux.Provider store={store}>\n//     <Application />\n//   </ReactRedux.Provider>,\n//   document.getElementById(\"app\")\n// );\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}